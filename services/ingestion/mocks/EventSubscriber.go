// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/onflow/flow-evm-gateway/models"
)

// EventSubscriber is an autogenerated mock type for the EventSubscriber type
type EventSubscriber struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: ctx, height
func (_m *EventSubscriber) Subscribe(ctx context.Context, height uint64) <-chan models.BlockEvents {
	ret := _m.Called(ctx, height)

	var r0 <-chan models.BlockEvents
	if rf, ok := ret.Get(0).(func(context.Context, uint64) <-chan models.BlockEvents); ok {
		r0 = rf(ctx, height)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan models.BlockEvents)
		}
	}

	return r0
}

type mockConstructorTestingTNewEventSubscriber interface {
	mock.TestingT
	Cleanup(func())
}

// NewEventSubscriber creates a new instance of EventSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEventSubscriber(t mockConstructorTestingTNewEventSubscriber) *EventSubscriber {
	mock := &EventSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
